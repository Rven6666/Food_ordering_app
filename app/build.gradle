/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/8.1.1/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'java'
    id 'jacoco'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit test framework.
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'com.github.stefanbirkner:system-rules:1.19.0'


    // This dependency is used by the application.
    implementation 'com.google.guava:guava:31.1-jre'

    // Use JUnit Jupiter API for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.2'
    //to use Json 
    implementation files('libs/json-20230618-javadoc.jar')
    implementation 'org.apache.commons:commons-text:1.9'
    // to work for the JSON object
    implementation 'com.googlecode.json-simple:json-simple:1.1.1'
    // to encrypt for password
    implementation 'org.springframework.boot:spring-boot-starter-security:2.6.2'
    testImplementation 'org.mockito:mockito-inline:3.12.4'
    testImplementation 'org.powermock:powermock-api-mockito2:2.0.9'
    testImplementation 'org.powermock:powermock-module-junit4:2.0.9'

}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
}

application {
    // Define the main class for the application.
    mainClass = 'lab24.ankit.group01.a2.UI.App'
}

test {
    finalizedBy jacocoTestReport // report is always generated after tests run
    ignoreFailures = true
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
}

run {
    standardInput = System.in
}